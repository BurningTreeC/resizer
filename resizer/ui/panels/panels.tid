title: $:/plugins/BTC/resizer/procedures/panels
tags: $:/tags/Global
code-body: yes

\function tf.get.value.metric(value)
[<value>suffix[px]then[px]]
:else[<value>suffix[%]then[%]]
:else[<value>suffix[rem]then[rem]]
:else[<value>suffix[em]then[em]]
:else[<value>suffix[vh]then[vh]]
:else[<value>suffix[vw]then[vw]]
:else[<value>suffix[vmin]then[vmin]]
:else[<value>suffix[vmax]then[vmax]]
\end

\function tf.convert.px.to.percentage(parentWidth,width) [<width>multiply[100]divide<parentWidth>]

\procedure horizontal-split-panel(leftContent:"", rightContent:"", width:"50%", minHeight:"100%", minWidth:"5%", maxWidth:"80%", stateTiddler:"$:/state/hsplit/width", class:"", leftClass:"", rightClass:"", splitterClass:"")
\whitespace trim
<div class={{{ tc-horizontal-split-panel [<class>] +[join[ ]] }}} style.min-height=<<minHeight>> style.max-width="100%">
	<div class={{{ tc-panel-left [<leftClass>] +[join[ ]] }}} style.width={{{ [<stateTiddler>get[text]else<width>] }}} style.max-width=<<maxWidth>>>
		<%if [<leftContent>is[variable]] %>
			<$transclude $variable=<<leftContent>> $mode="block"/>
		<%elseif [<leftContent>is[tiddler]] [<leftContent>is[shadow]] %>
			<$transclude $tiddler=<<leftContent>> $mode="block"/>
		<% endif %>
	</div>
	<$resizer
		class={{{ tc-panel-splitter-vertical [<splitterClass>] +[join[ ]] }}}
		direction="horizontal"
		tiddler=<<stateTiddler>>
		min=<<minWidth>>
		max=<<maxWidth>>
		default=<<width>>
		unit={{{ [tf.get.value.metric<width>] :else[[px]] }}}
	/>
	<div class={{{ tc-panel-right [<rightClass>] +[join[ ]] }}}>
		<%if [<rightContent>is[variable]] %>
			<$transclude $variable=<<rightContent>> $mode="block"/>
		<%elseif [<rightContent>is[tiddler]] [<rightContent>is[shadow]] %>
			<$transclude $tiddler=<<rightContent>> $mode="block"/>
		<% endif %>
	</div>
</div>
\end

\procedure vertical-split-panel(topContent:"", bottomContent:"", panelHeight:"75vh", height:"50%", minHeight:"10%", maxHeight:"80%", stateTiddler:"$:/state/vsplit/height", class:"", topClass:"", bottomClass:"", splitterClass:"")
\whitespace trim
<div class={{{ tc-vertical-split-panel [<class>] +[join[ ]] }}} style.height=<<panelHeight>> style.max-width="100%">
	<div class={{{ tc-panel-top [<topClass>] +[join[ ]] }}} style.height={{{ [<stateTiddler>get[text]else<height>] }}} style.max-height=<<maxHeight>>>
		<%if [<topContent>is[variable]] %>
			<$transclude $variable=<<topContent>> $mode="block"/>
		<%elseif [<topContent>is[tiddler]] [<topContent>is[shadow]] %>
			<$transclude $tiddler=<<topContent>> $mode="block"/>
		<% endif %>
	</div>
	<$resizer
		class={{{ tc-panel-splitter-horizontal [<splitterClass>] +[join[ ]] }}}
		direction="vertical"
		tiddler=<<stateTiddler>>
		min=<<minHeight>>
		max=<<maxHeight>>
		default=<<height>>
		unit={{{ [tf.get.value.metric<height>] :else[[px]] }}}
	/>
	<div class={{{ tc-panel-bottom [<bottomClass>] +[join[ ]] }}}>
		<%if [<bottomContent>is[variable]] %>
			<$transclude $variable=<<bottomContent>> $mode="block"/>
		<%elseif [<bottomContent>is[tiddler]] [<bottomContent>is[shadow]] %>
			<$transclude $tiddler=<<bottomContent>> $mode="block"/>
		<% endif %>
	</div>
</div>
\end

\function tf.get-three-column-panels-left-max-width() [<rightStateTiddler>get[text]addsuffix[ - handleWidth - handleWidth - ]addsuffix<minWidth>addprefix[calc(100% - ]addsuffix[)]] :else[<rightWidth>addsuffix[ - handleWidth - handleWidth - ]addsuffix<minWidth>addprefix[calc(100% - ]addsuffix[)]]
\function tf.get-three-column-panels-right-max-width() [<leftStateTiddler>get[text]addsuffix[ - handleWidth - handleWidth - ]addsuffix<minWidth>addprefix[calc(100% - ]addsuffix[)]] :else[<leftWidth>addsuffix[ - handleWidth - handleWidth - ]addsuffix<minWidth>addprefix[calc(100% - ]addsuffix[)]]

\procedure three-column-panels(leftContent:"", centerContent:"", rightContent:"", leftWidth:"10%", rightWidth:"10%", minWidth:"5%", maxWidth:"80%", minHeight:"100%", leftStateTiddler:"$:/state/three-col/left", rightStateTiddler:"$:/state/three-col/right", class:"")
\whitespace trim
<div class={{{ tc-three-column-panels [<class>] +[join[ ]] }}} style.min-height=<<minHeight>> style.max-width="100%">
	<div class="tc-panel-left" style.width={{{ [<leftStateTiddler>get[text]else<leftWidth>] }}} style.max-height="100%">
		<%if [<leftContent>is[variable]] %>
			<$transclude $variable=<<leftContent>> $mode="block"/>
		<%elseif [<leftContent>is[tiddler]] [<leftContent>is[shadow]] %>
			<$transclude $tiddler=<<leftContent>> $mode="block"/>
		<% endif %>
	</div>
	<$resizer
		class="tc-panel-splitter-vertical"
		direction="horizontal"
		tiddler=<<leftStateTiddler>>
		min=<<minWidth>>
		max=<<tf.get-three-column-panels-left-max-width>>
		default=<<leftWidth>>
		unit={{{ [tf.get.value.metric<leftWidth>] :else[[px]] }}}
	/>
	<div class="tc-panel-center" style.min-width=<<minWidth>> style.max-height="100%">
		<%if [<centerContent>is[variable]] %>
			<$transclude $variable=<<centerContent>> $mode="block"/>
		<%elseif [<centerContent>is[tiddler]] [<centerContent>is[shadow]] %>
			<$transclude $tiddler=<<centerContent>> $mode="block"/>
		<% endif %>
	</div>
	<$resizer
		class="tc-panel-splitter-vertical"
		direction="horizontal"
		tiddler=<<rightStateTiddler>>
		min=<<minWidth>>
		max=<<tf.get-three-column-panels-right-max-width>>
		default=<<rightWidth>>
		unit={{{ [tf.get.value.metric<rightWidth>] :else[[px]] }}}
		invert="yes"
		element="nextSibling"
	/>
	<div class="tc-panel-right" style.width={{{ [<rightStateTiddler>get[text]else<rightWidth>] }}} style.max-height="100%">
		<%if [<rightContent>is[variable]] %>
			<$transclude $variable=<<rightContent>> $mode="block"/>
		<%elseif [<rightContent>is[tiddler]] [<rightContent>is[shadow]] %>
			<$transclude $tiddler=<<rightContent>> $mode="block"/>
		<% endif %>
	</div>
</div>
\end

\procedure collapsible-master-detail-panel(masterContent:"", detailContent:"", collapsed:"no", size:"25%", minSize:"10%", maxSize:"40%", minHeight:"100%" stateTiddler:"$:/state/cmdp/size", collapseStateTiddler:"$:/state/cmdp/collapsed", class:"")
\whitespace trim
<div class={{{ tc-collapsible-master-detail [<class>] +[join[ ]] }}} style.min-height=<<minHeight>> style.max-width="100%">
	<%if [<collapseStateTiddler>get[text]else<collapsed>match[no]] %>
		<$button class="tc-btn-invisible tc-panel-collapse-btn" set=<<collapseStateTiddler>> setTo="yes">
			{{$:/core/images/chevron-left}}
		</$button>
	<%elseif [<collapseStateTiddler>get[text]else<collapsed>match[yes]] %>
		<$button class="tc-btn-invisible tc-panel-expand-btn" set=<<collapseStateTiddler>> setTo="no">
			{{$:/core/images/chevron-right}}
		</$button>
	<% endif %>
	<div class={{{ [<collapseStateTiddler>get[text]else<collapsed>match[no]then[tc-master-panel]] :else[[tc-master-panel tc-collapsed]] }}} style.width={{{ [<stateTiddler>get[text]else<size>] }}} style.max-width=<<maxSize>> style.margin-left={{{ [<collapseStateTiddler>get[text]else<collapsed>match[yes]then<stateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddler>get[text]else<collapsed>match[yes]then<size>addprefix[-]] :else[[0]] }}}>
		<%if [<masterContent>is[variable]] %>
			<$transclude $variable=<<masterContent>> $mode="block"/>
		<%elseif [<masterContent>is[tiddler]] [<masterContent>is[shadow]] %>
			<$transclude $tiddler=<<masterContent>> $mode="block"/>
		<% endif %>
	</div>
	<%if [<collapseStateTiddler>get[text]else<collapsed>match[no]] %>
		<$resizer
			class="tc-panel-splitter-vertical"
			direction="horizontal"
			tiddler=<<stateTiddler>>
			min=<<minSize>>
			max=<<maxSize>>
			default=<<size>>
			unit={{{ [tf.get.value.metric<size>] :else[[px]] }}}
		/>
	<% endif %>
	<div class={{{ [<collapseStateTiddler>get[text]else<collapsed>match[no]then[tc-detail-panel]] :else[[tc-detail-panel tc-expanded]] }}}>
		<%if [<detailContent>is[variable]] %>
			<$transclude $variable=<<detailContent>> $mode="block"/>
		<%elseif [<detailContent>is[tiddler]] [<detailContent>is[shadow]] %>
			<$transclude $tiddler=<<detailContent>> $mode="block"/>
		<% endif %>
	</div>
</div>
\end

\procedure collapsible-three-column-panels(leftContent:"", centerContent:"", rightContent:"", leftWidth:"10%", rightWidth:"10%", minWidth:"5%", maxWidth:"80%", minHeight:"100%", leftStateTiddler:"$:/state/three-col-collapsible/left", rightStateTiddler:"$:/state/three-col-collapsible/right", class:"", collapsedLeft:"no", collapsedRight:"no", collapseStateTiddlerLeft:"$:/state/ctcp/left", collapseStateTiddlerRight:"$:/state/ctcp/right")
\whitespace trim
<div class={{{ tc-three-column-panels tc-collapsible-three-column-panels [<class>] +[join[ ]] }}} style.min-height=<<minHeight>> style.max-width="100%">
	<%if [<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[no]] %>
		<$button class="tc-btn-invisible tc-panel-collapse-btn tc-panel-btn-left" set=<<collapseStateTiddlerLeft>> setTo="yes">
			{{$:/core/images/chevron-left}}
		</$button>
	<%elseif [<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[yes]] %>
		<$button class="tc-btn-invisible tc-panel-expand-btn tc-panel-btn-left" set=<<collapseStateTiddlerLeft>> setTo="no">
			{{$:/core/images/chevron-right}}
		</$button>
	<% endif %>
	<%if [<collapseStateTiddlerRight>get[text]else<collapsedRight>match[no]] %>
		<$button class="tc-btn-invisible tc-panel-collapse-btn tc-panel-btn-right" set=<<collapseStateTiddlerRight>> setTo="yes">
			{{$:/core/images/chevron-right}}
		</$button>
	<%elseif [<collapseStateTiddlerRight>get[text]else<collapsedRight>match[yes]] %>
		<$button class="tc-btn-invisible tc-panel-expand-btn tc-panel-btn-right" set=<<collapseStateTiddlerRight>> setTo="no">
			{{$:/core/images/chevron-left}}
		</$button>
	<% endif %>
	<div class="tc-panel-left" style.width={{{ [<leftStateTiddler>get[text]else<leftWidth>] }}} style.max-height="100%" style.margin-left={{{ [<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[yes]then<leftStateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[yes]then<leftWidth>addprefix[-]] :else[[0]] }}}>
		<%if [<leftContent>is[variable]] %>
			<$transclude $variable=<<leftContent>> $mode="block"/>
		<%elseif [<leftContent>is[tiddler]] [<leftContent>is[shadow]] %>
			<$transclude $tiddler=<<leftContent>> $mode="block"/>
		<% endif %>
	</div>
	<%if [<collapseStateTiddlerLeft>get[text]else<collapsedLeft>match[no]] %>
		<$resizer
			class="tc-panel-splitter-vertical"
			direction="horizontal"
			tiddler=<<leftStateTiddler>>
			min=<<minWidth>>
			max=<<tf.get-three-column-panels-left-max-width>>
			default=<<leftWidth>>
			unit={{{ [tf.get.value.metric<leftWidth>] :else[[px]] }}}
		/>
	<% endif %>
	<div class="tc-panel-center" style.min-width=<<minWidth>> style.max-height="100%">
		<%if [<centerContent>is[variable]] %>
			<$transclude $variable=<<centerContent>> $mode="block"/>
		<%elseif [<centerContent>is[tiddler]] [<centerContent>is[shadow]] %>
			<$transclude $tiddler=<<centerContent>> $mode="block"/>
		<% endif %>
	</div>
	<%if [<collapseStateTiddlerRight>get[text]else<collapsedRight>match[no]] %>
		<$resizer
			class="tc-panel-splitter-vertical"
			direction="horizontal"
			tiddler=<<rightStateTiddler>>
			min=<<minWidth>>
			max=<<tf.get-three-column-panels-right-max-width>>
			default=<<rightWidth>>
			unit={{{ [tf.get.value.metric<rightWidth>] :else[[px]] }}}
			invert="yes"
			element="nextSibling"
		/>
	<% endif %>
	<div class="tc-panel-right" style.width={{{ [<rightStateTiddler>get[text]else<rightWidth>] }}} style.max-height="100%" style.margin-right={{{ [<collapseStateTiddlerRight>get[text]else<collapsedRight>match[yes]then<rightStateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddlerRight>get[text]else<collapsedRight>match[yes]then<rightWidth>addprefix[-]] :else[[0]] }}}>
		<%if [<rightContent>is[variable]] %>
			<$transclude $variable=<<rightContent>> $mode="block"/>
		<%elseif [<rightContent>is[tiddler]] [<rightContent>is[shadow]] %>
			<$transclude $tiddler=<<rightContent>> $mode="block"/>
		<% endif %>
	</div>
</div>
\end

\function tf.get-three-column-panels-top-max-height() [<bottomStateTiddler>get[text]addsuffix[ - handleHeight - handleHeight - ]addsuffix<minHeight>addprefix[ - ]addprefix<overallHeight>addprefix[calc(]addsuffix[)]] :else[<bottomHeight>addsuffix[ - handleHeight - handleHeight - ]addsuffix<minHeight>addprefix[ - ]addprefix<overallHeight>addprefix[calc(]addsuffix[)]]
\function tf.get-three-column-panels-bottom-max-height() [<topStateTiddler>get[text]addsuffix[ - handleHeight - handleHeight - ]addsuffix<minHeight>addprefix[ - ]addprefix<overallHeight>addprefix[calc(]addsuffix[)]] :else[<topHeight>addsuffix[ - handleHeight - handleHeight - ]addsuffix<minHeight>addprefix[ - ]addprefix<overallHeight>addprefix[calc(]addsuffix[)]]

\procedure collapsible-three-row-panels(topContent:"", centerContent:"", bottomContent:"", topHeight:"10vh", bottomHeight:"10vh", minHeight:"5vh", maxHeight:"55vh", width:"100%", overallHeight:"75vh", topStateTiddler:"$:/state/three-col-collapsible-vertical/top", bottomStateTiddler:"$:/state/three-col-collapsible-vertical/bottom", class:"", collapsedTop:"no", collapsedBottom:"no", collapseStateTiddlerTop:"$:/state/ctcpv/top", collapseStateTiddlerBottom:"$:/state/ctcpv/bottom")
\whitespace trim
<div class={{{ tc-three-row-panels tc-collapsible-three-row-panels [<class>] +[join[ ]] }}} style.min-width=<<width>> style.max-width=<<width>> style.height=<<overallHeight>> style.max-height=<<overallHeight>>>
	<%if [<collapseStateTiddlerTop>get[text]else<collapsedTop>match[no]] %>
		<$button class="tc-btn-invisible tc-panel-collapse-btn tc-panel-btn-top" set=<<collapseStateTiddlerTop>> setTo="yes">
			{{$:/core/images/chevron-left}}
		</$button>
	<%elseif [<collapseStateTiddlerTop>get[text]else<collapsedTop>match[yes]] %>
		<$button class="tc-btn-invisible tc-panel-expand-btn tc-panel-btn-top" set=<<collapseStateTiddlerTop>> setTo="no">
			{{$:/core/images/chevron-right}}
		</$button>
	<% endif %>
	<%if [<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[no]] %>
		<$button class="tc-btn-invisible tc-panel-collapse-btn tc-panel-btn-bottom" set=<<collapseStateTiddlerBottom>> setTo="yes">
			{{$:/core/images/chevron-right}}
		</$button>
	<%elseif [<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[yes]] %>
		<$button class="tc-btn-invisible tc-panel-expand-btn tc-panel-btn-bottom" set=<<collapseStateTiddlerBottom>> setTo="no">
			{{$:/core/images/chevron-left}}
		</$button>
	<% endif %>
	<div class="tc-panel-top" style.min-height=<<minHeight>> style.height={{{ [<topStateTiddler>get[text]else<topHeight>] }}} style.max-width="100%" style.margin-top={{{ [<collapseStateTiddlerTop>get[text]else<collapsedTop>match[yes]then<topStateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddlerTop>get[text]else<collapsedTop>match[yes]then<topHeight>addprefix[-]] :else[[0]] }}}>
		<%if [<topContent>is[variable]] %>
			<$transclude $variable=<<topContent>> $mode="block"/>
		<%elseif [<topContent>is[tiddler]] [<topContent>is[shadow]] %>
			<$transclude $tiddler=<<topContent>> $mode="block"/>
		<% endif %>
	</div>
	<%if [<collapseStateTiddlerTop>get[text]else<collapsedTop>match[no]] %>
		<$resizer
			class="tc-panel-splitter-horizontal"
			direction="vertical"
			tiddler=<<topStateTiddler>>
			min=<<minHeight>>
			max=<<tf.get-three-column-panels-top-max-height>>
			default=<<topHeight>>
			unit={{{ [tf.get.value.metric<topHeight>] :else[[px]] }}}
		/>
	<% endif %>
	<div class="tc-panel-center-vertical" style.min-height=<<minHeight>> style.max-width="100%">
		<div style.height="100%" style.display="flex" style.justify-content="center">
			<%if [<centerContent>is[variable]] %>
				<$transclude $variable=<<centerContent>> $mode="block"/>
			<%elseif [<centerContent>is[tiddler]] [<centerContent>is[shadow]] %>
				<$transclude $tiddler=<<centerContent>> $mode="block"/>
			<% endif %>
		</div>
	</div>
	<%if [<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[no]] %>
		<$resizer
			class="tc-panel-splitter-horizontal"
			direction="vertical"
			tiddler=<<bottomStateTiddler>>
			min=<<minHeight>>
			max=<<tf.get-three-column-panels-bottom-max-height>>
			default=<<bottomHeight>>
			unit={{{ [tf.get.value.metric<bottomHeight>] :else[[px]] }}}
			invert="yes"
			element="nextSibling"
		/>
	<% endif %>
	<div class="tc-panel-bottom" style.min-height=<<minHeight>> style.height={{{ [<bottomStateTiddler>get[text]else<bottomHeight>] }}} style.max-width="100%" style.margin-bottom={{{ [<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[yes]then<bottomStateTiddler>get[text]addprefix[-]] :else[<collapseStateTiddlerBottom>get[text]else<collapsedBottom>match[yes]then<bottomHeight>addprefix[-]] :else[[0]] }}}>
		<%if [<bottomContent>is[variable]] %>
			<$transclude $variable=<<bottomContent>> $mode="block"/>
		<%elseif [<bottomContent>is[tiddler]] [<bottomContent>is[shadow]] %>
			<$transclude $tiddler=<<bottomContent>> $mode="block"/>
		<% endif %>
	</div>
</div>
\end

\function tf.get.table.width() [<stateTiddlerPrefix>addsuffix[parent-size]get[text]addsuffix[px]]

\function tf.get.max.column.width.more.than.two()
	[range<columns>!match<colIndex>!match<nextColIndex>]
	:reduce[addprefix<stateTiddlerPrefix>get[text]!prefix[Infinity]else<cellWidth>add<accumulator>]
	:and[subtract[100]]
	:map[abs<currentTiddler>subtract<tf.get.min.column.width.percentage>addsuffix[%]]
\end

\function tf.get.max.column.width.two()
	[<tf.get.table.width>subtract[50]]
	:map[tf.convert.px.to.percentage<tf.get.table.width>,<currentTiddler>]
\end

\function tf.get.max.column.width()
	[<columns>match[2]then<tf.get.max.column.width.two>]
	:else[<columns>!match[2]then<tf.get.max.column.width.more.than.two>]
\end

\function tf.get.min.column.width.percentage() [tf.convert.px.to.percentage<tf.get.table.width>,[50px]addsuffix[%]]
\function tf.get.max.column.width.percentage() [<colIndex>!match<columns>then<tf.get.table.width>!is[blank]then<tf.get.max.column.width>]

\procedure resizable-table-on-before-resize-start-actions()
<$action-setfield $tiddler={{{ [<stateTiddlerPrefix>addsuffix[parent-size]] }}} text=<<tv-action-parent-size>>/>
<$action-setfield $tiddler={{{ [<stateTiddlerPrefix>addsuffix<colIndex>] }}} width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}/>
<$action-setfield $tiddler={{{ [<stateTiddlerPrefix>addsuffix<nextColIndex>] }}} width={{{ [<stateTiddlerPrefix>addsuffix<nextColIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}/>
\end

\procedure resizable-table-on-resize-actions()
<$let tv-action-delta-x-converted={{{ [tf.convert.px.to.percentage<tf.get.table.width>,<tv-action-delta-x>] }}}>
	<$action-setfield
		$tiddler={{{ [<stateTiddlerPrefix>addsuffix<colIndex>] }}}
		text={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[width]] :else[<cellWidth>] +[add<tv-action-delta-x-converted>compare:number:gteq<tf.get.min.column.width.percentage>compare:number:lteq<tf.get.max.column.width.percentage>addsuffix[%]] :else[<stateTiddlerPrefix>addsuffix<colIndex>get[width]else<cellWidth>add<tv-action-delta-x-converted>compare:number:lteq<tf.get.min.column.width.percentage>then<tf.get.min.column.width.percentage>else<tf.get.max.column.width.percentage>] +[!prefix[Infinity]else<cellWidth>] }}}
	/>
	<$action-setfield
		$tiddler={{{ [<stateTiddlerPrefix>addsuffix<nextColIndex>] }}}
		text={{{ [<stateTiddlerPrefix>addsuffix<nextColIndex>get[width]] :else[<cellWidth>] +[subtract<tv-action-delta-x-converted>compare:number:gteq<tf.get.min.column.width.percentage>compare:number:lteq<tf.get.max.column.width.percentage>addsuffix[%]] :else[<stateTiddlerPrefix>addsuffix<nextColIndex>get[width]else<cellWidth>subtract<tv-action-delta-x-converted>compare:number:lteq<tf.get.min.column.width.percentage>then<tf.get.min.column.width.percentage>else<tf.get.max.column.width.percentage>] +[!prefix[Infinity]else<cellWidth>] }}}
	/>
</$let>
\end

\procedure resizable-table-content-inner(filter)
\whitespace trim
<%if [<editable>match[yes]] %>
	<$let state={{{ [[$:/state/edit-cell-]addsuffix<colIndex>addsuffix[-]addsuffix<row>addsuffix[-]addsuffix<qualify>] }}}>
		<%if [<state>get[text]!match[yes]] [<state>is[missing]] %>
			<div style.display="flex">
				<div style.flex="1">
					<$wikify name="content" text="""<$text text={{{ [subfilter<filter>get<field>] }}}/>""">
						<<content>>
					</$wikify>
				</div>
				<div>
					<$button class="tc-btn-invisible" set=<<state>> setTo="yes" actions=<<resizable-table-content-create-tiddler-actions>>>
						{{$:/core/images/edit-button}}
					</$button>
				</div>
			</div>
		<% else %>
			<div style.display="flex">
				<div style.flex="1">
					<$edit-text tag="input" tiddler={{{ [subfilter<filter>] }}} focus="yes" class="tc-width-100"/>
				</div>
				<div>
					<$button class="tc-btn-invisible" set=<<state>> setTo="no">
						{{$:/core/images/done-button}}
					</$button>
				</div>
			</div>
		<% endif %>
	</$let>
<% else %>
	<$wikify name="content" text="""<$text text={{{ [subfilter<filter>get<field>] }}}/>""">
		<<content>>
	</$wikify>
<% endif %>
\end

\procedure resizable-table-content(filter,tableArea)
<%if [<wikitextTable>is[blank]] %>
	<$transclude $variable="resizable-table-content-inner" filter=<<filter>>/>
<%elseif [<tableArea>match[header]] %>
	<$let tableHeader={{{ [<wikitextTable>splitregexp[\n]suffix[|h]] }}} tableHeaderCell={{{ [<tableHeader>split[|]butfirst[]butlast[]nth<colIndex>] }}}>
		<$wikify name="content" text=<<tableHeaderCell>>>
			<<content>>
		</$wikify>
	</$let>
<%elseif [<tableArea>match[rows]] %>
	<$let tableRow={{{ [<wikitextTable>splitregexp[\n]!suffix[|h]!suffix[|c]!suffix[|f]!suffix[|k]nth<rowIndex>] }}} tableRowCell={{{ [<tableRow>split[|]butfirst[]butlast[]nth<colIndex>] }}}>
		<$wikify name="content" text=<<tableRowCell>>>
			<<content>>
		</$wikify>
	</$let>
<%elseif [<tableArea>match[footer]] %>
	<$let tableFooter={{{ [<wikitextTable>splitregexp[\n]suffix[|f]] }}} tableFooterCell={{{ [<tableFooter>split[|]butfirst[]butlast[]nth<colIndex>] }}}>
		<$wikify name="content" text=<<tableFooterCell>>>
			<<content>>
		</$wikify>
	</$let>
<% endif %>
\end


<!-- Replace every cell value except ">" or "<" by "1" -->
\function fn.row.value-to-1()
	[all[]]
	:map[<currentTiddler>!regexp[>|<]then[1]else<currentTiddler>]
	:map[<currentTiddler>match[<]then<index>match[0]then[1]else<currentTiddler>]
	:map[<currentTiddler>match[>]then<index>match<columnsMinusOne>then[1]else<currentTiddler>]
	+[join[ ]]
\end


<!-- Replace every cell value except "~" by "1" -->
\function fn.col.value-to-1()
	[all[]]
	:map[<currentTiddler>!match[~]then[1]else<currentTiddler>]
	:map[<currentTiddler>match[~]then<index>match[0]then[1]else<currentTiddler>]
	+[join[ ]]
\end


<!-- Counts the occurrences of "c" in string "s" -->
\function fn.nb(c,s)
	[<s>split<c>count[]subtract[1]]
\end


<!-- Replaces sequences of "from" characters by "to" characters -->
\function fn.expand.cell(from,to)
	[fn.nb<from>,<cell>!match[0]]
	:map:flat[range<currentTiddler>]
	:map[<to>]
	+[join[]]
\end


<!-- Returns <<cell>> length -->
\function fn.cell.ln() [<cell>split[]count[]]


<!-- Computes current <<cell>> weight -->
\function fn.compute.row.cell(cell)
	=[fn.expand.cell[>],[0 ]]
	=[fn.cell.ln[]]
	=[fn.expand.cell[<],[ 0]]
	+[join[]]
\end


<!-- Computes current <<cell>> weight -->
\function fn.compute.col.cell(cell)
	=[fn.cell.ln[]]
	=[fn.expand.cell[~],[ 0]]
	+[join[]]
\end


<!-- Computes current <<row>> weights -->
\function fn.compute.row(row)
	=[<row>split[|]]
	:map:flat[fn.compute.row.cell<currentTiddler>]
	+[join[ ]]
\end


<!-- Computes current <<col>> weights -->
\function fn.compute.col(col)
	=[<col>split[|]]
	:map:flat[fn.compute.col.cell<currentTiddler>]
	+[join[ ]]
\end


<!-- Sanitizes input (not perfect, but you get the idea... -->
\function fn.sanitize()
	[all[]]
	:map[<currentTiddler>search-replace:g[||],[|x|]search-replace:g:regexp[\|\s+\|],[|x|]]
\end


<!-- Replaces actual cell values by "1"s -->
\function fn.get.row.ones()
	[all[]]
	:map[<currentTiddler>split[|]butfirst[]butlast[]trim[]fn.row.value-to-1[]enlist-input:raw[]join[|]]
\end


<!-- Replaces actual cell values by "1"s -->
\function fn.get.col.ones()
	[all[]]
	:map[<currentTiddler>split[|]trim[]butfirst[]butlast[]fn.col.value-to-1[]enlist-input:raw[]join[|]]
\end


<!-- Collapse cells (">|1" becomes ">1" -->
\function fn.row.collapse()
	[all[]]
	:map[<currentTiddler>search-replace:g[>|],[>]search-replace:g[|<],[<]]
\end


<!-- Collapse cells ("1|~" becomes "1~" -->
\function fn.col.collapse()
	[all[]]
	:map[<currentTiddler>search-replace:g[|~],[~]]
\end


\function tf.exclude.header.caption.classes.footer() [!suffix[|h]!suffix[|c]!suffix[|f]!suffix[|k]]
\function tf.is.header() [suffix[|h]]


<!-- Maps a table to its colspans -->
\function row.map(table,fn)
	[<table>splitregexp[\n]function<fn>] :and[nth<rowIndex>]
	:map[<currentTiddler>fn.sanitize[]]
	:map[<currentTiddler>fn.get.row.ones[>|<]]
	:map[<currentTiddler>fn.row.collapse[]]
	:map[fn.compute.row<currentTiddler>]
\end


<!-- Maps a table to its rowspans -->
\function col.map(table,fn)
	[<table>splitregexp[\n]function<fn>split[|]butfirst[]butlast[]join[ ]enlist-input:raw[]]
	:map:flat[<index>remainder<columns>match<previousColIndex>then<currentTiddler>]
	:and[!match[]join[|]] :and[addprefix[|]addsuffix[|]]
	:map[<currentTiddler>fn.sanitize[]]
	:map[<currentTiddler>fn.get.col.ones[]]
	:map[<currentTiddler>fn.col.collapse[]]
	:map[fn.compute.col<currentTiddler>]
\end


\function tf.get.colspan() [row.map<wikitextTable>,[tf.exclude.header.caption.classes.footer]split[ ]!match[]nth<colIndex>]
\function tf.get.rowspan() [col.map<wikitextTable>,[tf.exclude.header.caption.classes.footer]split[ ]!match[]nth<rowIndex>]


\function tf.row.split.regexp() [<wikitextTable>splitregexp[\n]!is[blank]]
\function tf.row.split.regexp.count.columns() [function[tf.row.split.regexp]!suffix[|c]!suffix[|k]nth[1]split[|]butfirst[]butlast[]count[]]
\function tf.row.split.regexp.count.rows() [function[tf.row.split.regexp]!suffix[|h]!suffix[|c]!suffix[|f]!suffix[|k]count[]]
\function tf.row.split.regexp.has.header() [function[tf.row.split.regexp]suffix[|h]then[yes]]
\function tf.row.split.regexp.has.footer() [function[tf.row.split.regexp]suffix[|f]then[yes]]
\function tf.row.split.regexp.get.caption() [function[tf.row.split.regexp]suffix[|c]split[|]butfirst[]butlast[]first[]]


\function tf.get.table.cell() [function[tf.row.split.regexp]!suffix[|h]!suffix[|c]!suffix[|f]!suffix[|k]nth<rowIndex>split[|]butfirst[]butlast[]nth<colIndex>]
\function tf.get.table.cell.align()
	[<tableCell>regexp[^\s.*\s$]then[center]]
	:else[<tableCell>regexp<alignRightRegexp>then[right]]
	:else[<tableCell>regexp<alignLeftRegexp>then[left]]
\end
\function tf.get.table.cell.valign()
	[<tableCell>regexp[^(\^|&#94;).*]then[top]]
	:else[<tableCell>regexp[^(,|&#44;).*]then[bottom]]
\end


\procedure resizable-table(columns:"", rows:"", columnFilter:"", rowFilter:"", footerFilter:"", field:"text", editable:"no", tableHeight:"auto", class:"", headerClass:"", cellClass:"", stateTiddlerPrefix:"$:/state/resizable-table/", caption:"", wikitextTable:"")
\whitespace trim
<$let
	columns={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.count.columns>] :else[<wikitextTable>is[blank]then<columns>] :else[[0]] }}}
	rows={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.count.rows>] :else[<wikitextTable>is[blank]then<rows>] :else[[0]] }}}
	cellWidth={{{ [[100]divide<columns>addsuffix[%]] }}}
	stateTiddlerPrefix={{{ [<stateTiddlerPrefix>addsuffix<columns>addsuffix<qualify>addsuffix[/]addsuffix[col-]] }}}
	hasHeader={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.has.header>] :else[[no]] }}}
	hasFooter={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.has.footer>] :else[[no]] }}}
	caption={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp.get.caption>] :else[<caption>!is[blank]] :else[[]] }}}
	wikitextClasses={{{ [<wikitextTable>!is[blank]then<tf.row.split.regexp>suffix[|k]split[|]butfirst[]butlast[]first[]] }}}
	columnsMinusOne={{{ [<columns>subtract[1]] }}}
>
	<div class={{{ tc-resizable-table-wrapper [<class>] +[join[ ]] }}} style.height=<<tableHeight>> style.width="100%">
		<table class={{{ tc-resizable-table evenRow [<wikitextClasses>] +[join[ ]] }}} style.width="100%">
			<%if [<caption>!is[blank]] %>
				<caption>
					<<caption>>
				</caption>
			<% endif %>
			<%if [<wikitextTable>is[blank]then<columns>!is[blank]then<columnFilter>!is[blank]] [<wikitextTable>!is[blank]then<hasHeader>match[yes]] %>
				<thead>
					<tr class={{{ tc-resizable-table-header [<headerClass>] +[join[ ]] }}}>
						<$list filter="[range<columns>]" variable="column" counter="colIndex">
							<$let nextColIndex={{{ [<colIndex>add[1]] }}} row="0">
								<th
									style.position="relative"
									style.min-width=<<tf.get.min.column.width.percentage>>
									style.max-width=<<tf.get.max.column.width.percentage>>
									style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}
								>
									<div class="tc-resizable-table-cell" style.width="100%">
										<$transclude $variable="resizable-table-content" filter=<<columnFilter>> tableArea="header"/>
									</div>
									<%if [<colIndex>!match<columns>] %>
										<$resizer
											class="tc-table-column-resizer"
											direction="horizontal"
											min=<<tf.get.min.column.width.percentage>>
											max=<<tf.get.max.column.width.percentage>>
											default=<<cellWidth>>
											unit="px"
											element="parent.parent"
											onBeforeResizeStart=<<resizable-table-on-before-resize-start-actions>>
											onResize=<<resizable-table-on-resize-actions>>
										/>
									<% endif %>
								</th>
							</$let>
						</$list>
					</tr>
				</thead>
			<% endif %>
			<%if [<wikitextTable>is[blank]then<rows>!is[blank]then<rowFilter>!is[blank]] [<wikitextTable>!is[blank]] %>
				<tbody>
					<$list filter="[range<rows>]" variable="row" counter="rowIndex">
						<tr class={{{ tc-resizable-table-row [<rowIndex>remainder[2]match[1]then[evenRow]else[oddRow]] [<cellClass>] +[join[ ]] }}}>
							<$list filter="[range<columns>]" variable="column" counter="colIndex">
								<$let
									previousColIndex={{{ [<colIndex>subtract[1]] }}}
									nextColIndex={{{ [<colIndex>add[1]] }}}
									colspan={{{ [<wikitextTable>!is[blank]then<tf.get.colspan>] :else[[1]] }}}
									rowspan={{{ [<wikitextTable>!is[blank]then<tf.get.rowspan>] :else[[1]] }}}
									tableCell=<<tf.get.table.cell>>
									alignRightRegexp="^\s.*[^\s]$"
									alignLeftRegexp="^[^\s].*\s$"
								>
									<%if [<colspan>!match[0]then<rowspan>!match[0]] %>
										<td
											align=<<tf.get.table.cell.align>>
											valign=<<tf.get.table.cell.valign>>
											style.position="relative"
											style.min-width=<<tf.get.min.column.width.percentage>>
											style.max-width=<<tf.get.max.column.width.percentage>>
											style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}
											colspan=<<colspan>>
											rowspan=<<rowspan>>
										>
											<div class="tc-resizable-table-cell" style.width="100%">
												<$transclude $variable="resizable-table-content" filter=<<rowFilter>> tableArea="rows"/>
											</div>
											<%if [<colIndex>!match<columns>] %>
												<$resizer
													class="tc-table-column-resizer"
													direction="horizontal"
													min=<<tf.get.min.column.width.percentage>>
													max=<<tf.get.max.column.width.percentage>>
													default=<<cellWidth>>
													unit="px"
													element="parent.parent"
													onBeforeResizeStart=<<resizable-table-on-before-resize-start-actions>>
													onResize=<<resizable-table-on-resize-actions>>
												/>
											<% endif %>
										</td>
									<% endif %>
								</$let>
							</$list>
						</tr>
					</$list>
				</tbody>
			<% endif %>
			<%if [<wikitextTable>is[blank]then<footerFilter>!is[blank]] [<wikitextTable>!is[blank]then<hasFooter>match[yes]] %>
				<tfoot>
					<tr class="evenRow">
						<$list filter="[range<columns>]" variable="column" counter="colIndex">
							<$let nextColIndex={{{ [<colIndex>add[1]] }}} row={{{ [<rows>add[1]] }}}>
								<td style.min-width=<<tf.get.min.column.width.percentage>> style.max-width=<<tf.get.max.column.width.percentage>> style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}}>
									<div class="tc-resizable-table-cell" style.width="100%">
										<$transclude $variable="resizable-table-content" filter=<<footerFilter>> tableArea="footer"/>
									</div>
								</td>
							</$let>
						</$list>
					</tr>
				</tfoot>
			<% endif %>
		</table>
	</div>
</$let>
\end

\procedure resizable-table-flexbox(columns:"", rows:"", columnFilter:"", rowFilter:"", editable:"no", tableHeight:"auto", class:"", headerClass:"", cellClass:"", stateTiddlerPrefix:"$:/state/resizable-table-flex/", wikitextTable:"")
\whitespace trim
<$let cellWidth={{{ [[100]divide<columns>addsuffix[%]] }}} stateTiddlerPrefix={{{ [<stateTiddlerPrefix>addsuffix<columns>addsuffix<qualify>addsuffix[/]addsuffix[col-]] }}}>
	<div class={{{ tc-resizable-table-flexbox-wrapper [<class>] +[join[ ]] }}} style.height=<<tableHeight>> style.width="100%" style.display="flex" style.flex-direction="column">
		<%if [<columns>!is[blank]then<columnFilter>!is[blank]] %>
			<div class={{{ tc-resizable-table-flexbox-header [<headerClass>] +[join[ ]] }}} style.display="flex">
				<$list filter="[range<columns>]" variable="column" counter="colIndex">
					<$let
						nextColIndex={{{ [<colIndex>add[1]] }}}
						columnZIndex={{{ [<columns>subtract<colIndex>add[1]] }}}
					>
						<div style.position="relative" style.z-index=<<columnZIndex>> style.min-width=<<tf.get.min.column.width.percentage>> style.max-width=<<tf.get.max.column.width.percentage>> style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}} style.padding="8px" style.font-weight="bold">
							<$transclude $variable="resizable-table-content" filter=<<columnFilter>>/>
							<%if [<colIndex>!match<columns>] %>
								<$resizer
									class="tc-table-column-resizer-flexbox"
									direction="horizontal"
									min=<<tf.get.min.column.width.percentage>>
									max=<<tf.get.max.column.width.percentage>>
									default=<<cellWidth>>
									unit="px"
									element="parent"
									onBeforeResizeStart=<<resizable-table-on-before-resize-start-actions>>
									onResize=<<resizable-table-on-resize-actions>>
								/>
							<% endif %>
						</div>
					</$let>
				</$list>
			</div>
		<% endif %>
		<%if [<rows>!is[blank]] %>
			<div class="tc-resizable-table-flexbox-body" style.flex="1" style.overflow="auto">
				<$list filter="[range<rows>]" variable="row" counter="rowIndex">
					<div class={{{ tc-resizable-table-flexbox-row [<cellClass>] +[join[ ]] }}} style.display="flex">
						<$list filter="[range<columns>]" variable="column" counter="colIndex">
							<$let 
								nextColIndex={{{ [<colIndex>add[1]] }}}
								columnZIndex={{{ [<columns>subtract<colIndex>add[1]] }}}>
								<div style.position="relative" style.z-index=<<columnZIndex>> style.min-width=<<tf.get.min.column.width.percentage>> style.max-width=<<tf.get.max.column.width.percentage>> style.width={{{ [<stateTiddlerPrefix>addsuffix<colIndex>get[text]!prefix[Infinity]] :else[<cellWidth>] }}} style.padding="8px" style.word-wrap="break-word" style.overflow-wrap="break-word">
									<$transclude $variable="resizable-table-content" filter=<<rowFilter>>/>
								</div>
							</$let>
						</$list>
					</div>
				</$list>
			</div>
		<% endif %>
	</div>
</$let>
\end
